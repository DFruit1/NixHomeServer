\#################################################################
Guide: Using Your LUKS + gocryptfs‑Protected USB Drive
\#################################################################

This document assumes you created the stick with **encrypt‑usb‑luks‑gocryptfs.sh**.
The resulting structure is:

```
└─ /dev/sdX1              # raw partition on the USB
   └─ /dev/mapper/secure_usb   # LUKS container (after unlock)
        ├─ encrypted/     # ciphertext view (auto‑created by script)
        └─ decrypted/     # plaintext mount‑point (auto‑created by script)
```

You must supply **two passphrases** to access your data:

1. **LUKS passphrase** – unlocks the whole partition.
2. **gocryptfs passphrase** – decrypts per‑file data inside the container.

─────────────────────────────────────────────────────────────────

1. Daily Workflow (quick reference)
   ─────────────────────────────────────────────────────────────────
   ■ Unlock & mount

---

```bash
# 1. Identify the partition (replace sdX1)
lsblk

# 2. Open LUKS container
echo "<LUKS‑password>" | sudo cryptsetup open /dev/sdX1 secure_usb

# 3. Mount ext4
sudo mount /dev/mapper/secure_usb /mnt/secure_usb

# 4. Mount gocryptfs
mkdir -p /mnt/secure_usb/decrypted

echo "<gocryptfs‑password>" | \
  gocryptfs -q /mnt/secure_usb/encrypted /mnt/secure_usb/decrypted
```

Your plaintext view is now **/mnt/secure\_usb/decrypted**.

## ■ Safely close & unplug

```bash
# Flush writes
sync

# 1. Unmount gocryptfs view
fusermount -u /mnt/secure_usb/decrypted

# 2. Unmount ext4
sudo umount /mnt/secure_usb

# 3. Close LUKS mapping
sudo cryptsetup luksClose secure_usb
```

Only pull the stick **after** the last command succeeds.

─────────────────────────────────────────────────────────────────
2\. Automated Helper Script (optional)
─────────────────────────────────────────────────────────────────
Create *usb‑open.sh*:

```bash
#!/usr/bin/env bash
set -e
DEV="/dev/sdX1"             # adjust once
MNT="/mnt/secure_usb"
LUKS_NAME="secure_usb"

printf "LUKS password: " >&2; read -rs LUKS_PW; echo >&2
printf "gocryptfs password: " >&2; read -rs G_PW;  echo >&2

echo "$LUKS_PW" | sudo cryptsetup open "$DEV" "$LUKS_NAME"
\sudo mount /dev/mapper/$LUKS_NAME "$MNT"
mkdir -p "$MNT/decrypted"

echo "$G_PW" | gocryptfs -q "$MNT/encrypted" "$MNT/decrypted"
```

Grant exec: `chmod +x usb‑open.sh`.

Create *usb‑close.sh*:

```bash
#!/usr/bin/env bash
set -e
sudo fusermount -u /mnt/secure_usb/decrypted
sudo umount /mnt/secure_usb
sudo cryptsetup luksClose secure_usb
```

─────────────────────────────────────────────────────────────────
3\. Backing‑up the LUKS Header (critical!)
─────────────────────────────────────────────────────────────────

```bash
sudo cryptsetup luksHeaderBackup /dev/sdX1 \
    --header-backup-file luks-header-$(date +%F).img
```

Store that **off‑line**; without it you cannot recover from header damage.

─────────────────────────────────────────────────────────────────
4\. Troubleshooting Cheatsheet
─────────────────────────────────────────────────────────────────

| Issue                                           | Likely Fix                                                                                             |
| ----------------------------------------------- | ------------------------------------------------------------------------------------------------------ |
| *Mapping fails: “No key available”*             | Wrong LUKS passphrase or wrong partition number.                                                       |
| *gocryptfs says “password incorrect”*           | Ensure you mounted **encrypted/** dir, not the root of ext4.                                           |
| *Second partition not auto‑mounting on Windows* | Windows only scans first removable partition; make the public partition #1 if you need cross‑platform. |
| Kernel logs spam “I/O error, dev sdb”           | Stick or reader hardware failure; try different port/PC, replace device.                               |

─────────────────────────────────────────────────────────────────
© 2025  Use freely.

